# Generated by Django 4.2.3 on 2023-11-28 15:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MethodProvidingService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=512)),
            ],
            options={
                'verbose_name': 'Справочник способов предоставления услуги',
                'verbose_name_plural': 'Справочник способов предоставления услуги',
            },
        ),
        migrations.CreateModel(
            name='PyrusForms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_id', models.IntegerField()),
                ('form_name', models.CharField(default='-empty-', max_length=30)),
            ],
            options={
                'verbose_name': 'Справочник форм пайруса',
                'verbose_name_plural': 'Справочник форм пайруса',
            },
        ),
        migrations.CreateModel(
            name='PyrusUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pyrus_id', models.IntegerField()),
                ('email', models.EmailField(max_length=255)),
                ('username', models.CharField(default='-empty-', max_length=255)),
                ('department', models.CharField(default='-empty-', max_length=255)),
                ('management', models.CharField(default='-empty-', max_length=255)),
                ('divizion', models.CharField(default='-empty-', max_length=255)),
            ],
            options={
                'verbose_name': 'Справочник менеджеров',
                'verbose_name_plural': 'Справочник менеджеров',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Справочник услуг',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Справочник систем',
                'verbose_name_plural': 'Системы',
            },
        ),
        migrations.CreateModel(
            name='SystemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Справочник категорий систем',
                'verbose_name_plural': 'Категории систем',
            },
        ),
        migrations.CreateModel(
            name='SystemServiceMainTeams',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_id', models.IntegerField()),
                ('role_name', models.CharField(default='no name', max_length=30)),
                ('plan_time', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('pyrus_stage', models.IntegerField()),
                ('start_support_time', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('end_support_time', models.DecimalField(decimal_places=2, default=24, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
            ],
            options={
                'verbose_name': 'Основные команды сопровождения для услуг',
                'verbose_name_plural': 'Основные команды сопровождения для услуг',
            },
        ),
        migrations.CreateModel(
            name='SystemServiceСompetenceTeams',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_id', models.IntegerField()),
                ('role_name', models.CharField(default='no name', max_length=30)),
                ('plan_time', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('pyrus_stage', models.IntegerField()),
                ('start_support_time', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('end_support_time', models.DecimalField(decimal_places=2, default=24, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
            ],
            options={
                'verbose_name': 'Команды компетенций для услуг',
                'verbose_name_plural': 'Команды компетенций для услуг',
            },
        ),
        migrations.CreateModel(
            name='TimeTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='-empty-', max_length=255)),
                ('description', models.CharField(default='-empty-', max_length=255)),
            ],
            options={
                'verbose_name': 'Справочник календарей',
                'verbose_name_plural': 'Справочник календарей',
            },
        ),
        migrations.CreateModel(
            name='TimeTableDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('is_work', models.BooleanField()),
                ('week', models.IntegerField()),
                ('year', models.IntegerField()),
                ('qr', models.IntegerField()),
                ('month', models.IntegerField(blank=True, null=True)),
                ('timetable', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.timetable')),
            ],
            options={
                'verbose_name': 'Дни в календаре',
                'verbose_name_plural': 'Дни в календаре',
            },
        ),
        migrations.CreateModel(
            name='SystemService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_time', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('start_support_time', models.DecimalField(decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('end_support_time', models.DecimalField(decimal_places=2, default=24, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(24)])),
                ('forms', models.ManyToManyField(blank=True, to='admin_panel.pyrusforms')),
                ('method_providing_service', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.methodprovidingservice')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.service')),
                ('supervizor', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.pyrususers')),
                ('system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='admin_panel.system')),
                ('system_service_competence_teams', models.ManyToManyField(blank=True, to='admin_panel.systemserviceсompetenceteams')),
                ('system_service_main_teams', models.ManyToManyField(blank=True, to='admin_panel.systemservicemainteams')),
                ('timetable', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.timetable')),
            ],
            options={
                'verbose_name': 'Услуги для системы',
                'verbose_name_plural': 'Услуги для системы',
            },
        ),
        migrations.CreateModel(
            name='SystemAlias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=30)),
                ('system', models.ManyToManyField(to='admin_panel.system')),
            ],
            options={
                'verbose_name': 'Справочник синонимов системы',
                'verbose_name_plural': 'Синонимы систем',
            },
        ),
        migrations.AddField(
            model_name='system',
            name='category',
            field=models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='admin_panel.systemcategory'),
        ),
    ]
